diff -urpN --no-dereference -X diffgen.ignore test-tree/drivers/mtd/nand/raw/nand_base.c milky/drivers/mtd/nand/raw/nand_base.c
--- test-tree/drivers/mtd/nand/raw/nand_base.c	2024-06-01 13:18:38.688510709 -0400
+++ milky/drivers/mtd/nand/raw/nand_base.c	2024-05-21 05:22:27.000000000 -0400
@@ -4708,6 +4708,7 @@ static int nand_detect(struct nand_chip
 	memorg->planes_per_lun = 1;
 	memorg->luns_per_target = 1;
 
+#ifndef CONFIG_MTD_NAND_CVSNFC
 	/*
 	 * Reset the chip, required by some chips (e.g. Micron MT29FxGxxxxx)
 	 * after power-up.
@@ -4746,6 +4747,10 @@ static int nand_detect(struct nand_chip
 		return -ENODEV;
 	}
 
+#endif
+	memcpy(chip->id.data, type->id, NAND_MAX_ID_LEN);
+	maf_id = chip->id.data[0];
+	dev_id = chip->id.data[1];
 	chip->id.len = nand_id_len(id_data, ARRAY_SIZE(chip->id.data));
 
 	/* Try to identify manufacturer */
@@ -5647,6 +5652,7 @@ static int nand_scan_tail(struct nand_ch
 			break;
 		case 64:
 		case 128:
+		case 256:
 			mtd_set_ooblayout(mtd,
 					  nand_get_large_page_hamming_ooblayout());
 			break;
diff -urpN --no-dereference -X diffgen.ignore test-tree/drivers/mtd/spi-nor/core.c milky/drivers/mtd/spi-nor/core.c
--- test-tree/drivers/mtd/spi-nor/core.c	2024-06-01 13:18:38.696510683 -0400
+++ milky/drivers/mtd/spi-nor/core.c	2024-05-21 05:22:27.000000000 -0400
@@ -750,6 +750,42 @@ static int spi_nor_write_sr(struct spi_n
 }
 
 /**
+ * spi_nor_write_sr2_jy() - Write the Status Register.
+ * @nor:	pointer to 'struct spi_nor'.
+ * @sr:		pointer to DMA-able buffer to write to the Status Register.
+ * @len:	number of bytes to write to the Status Register.
+ *
+ * Return: 0 on success, -errno otherwise.
+ */
+static int spi_nor_write_sr2_jy(struct spi_nor *nor, const u8 *sr, size_t len)
+{
+	int ret;
+
+	ret = spi_nor_write_enable(nor);
+	if (ret)
+		return ret;
+
+	if (nor->spimem) {
+		struct spi_mem_op op =
+			SPI_MEM_OP(SPI_MEM_OP_CMD(SPINOR_OP_WRSR2_JY, 1),
+				   SPI_MEM_OP_NO_ADDR,
+				   SPI_MEM_OP_NO_DUMMY,
+				   SPI_MEM_OP_DATA_OUT(len, sr, 1));
+
+		ret = spi_mem_exec_op(nor->spimem, &op);
+	} else {
+		ret = nor->controller_ops->write_reg(nor, SPINOR_OP_WRSR2_JY,
+						     sr, len);
+	}
+
+	if (ret) {
+		dev_dbg(nor->dev, "error %d writing SR\n", ret);
+		return ret;
+	}
+
+	return spi_nor_wait_till_ready(nor);
+}
+/**
  * spi_nor_write_sr1_and_check() - Write one byte to the Status Register 1 and
  * ensure that the byte written match the received value.
  * @nor:	pointer to a 'struct spi_nor'.
@@ -1959,6 +1995,40 @@ int spi_nor_sr2_bit1_quad_enable(struct
 	return spi_nor_write_16bit_cr_and_check(nor, nor->bouncebuf[0]);
 }
 
+int spi_nor_sr_bit1_quad_enable(struct spi_nor *nor)
+{
+	int ret;
+	u8 sr2;
+	u8 sr2_written;
+
+	ret = spi_nor_read_cr(nor, &sr2);
+	if (ret)
+		return ret;
+
+	if (sr2 & SR2_QUAD_EN_BIT1)
+		return 0;
+
+	sr2 |= SR2_QUAD_EN_BIT1;
+
+	ret = spi_nor_write_sr2_jy(nor, &sr2, 1);
+	if (ret)
+		return ret;
+
+	sr2_written = sr2;
+
+	/* Read back and check it. */
+	ret = spi_nor_read_cr(nor, &sr2);
+	if (ret)
+		return ret;
+
+	if (sr2 != sr2_written) {
+		dev_dbg(nor->dev, "SR2: Read back test failed\n");
+		return -EIO;
+	}
+
+	return 0;
+}
+
 /**
  * spi_nor_sr2_bit7_quad_enable() - set QE bit in Status Register 2.
  * @nor:	pointer to a 'struct spi_nor'
@@ -2007,6 +2077,7 @@ int spi_nor_sr2_bit7_quad_enable(struct
 }
 
 static const struct spi_nor_manufacturer *manufacturers[] = {
+	&spi_nor_cvitek,
 	&spi_nor_atmel,
 	&spi_nor_catalyst,
 	&spi_nor_eon,
@@ -2755,15 +2826,28 @@ static void spi_nor_info_init_params(str
 	if (info->flags & SPI_NOR_DUAL_READ) {
 		params->hwcaps.mask |= SNOR_HWCAPS_READ_1_1_2;
 		spi_nor_set_read_settings(&params->reads[SNOR_CMD_READ_1_1_2],
-					  0, 8, SPINOR_OP_READ_1_1_2,
-					  SNOR_PROTO_1_1_2);
+				0, 8, SPINOR_OP_READ_1_1_2,
+				SNOR_PROTO_1_1_2);
 	}
 
 	if (info->flags & SPI_NOR_QUAD_READ) {
 		params->hwcaps.mask |= SNOR_HWCAPS_READ_1_1_4;
 		spi_nor_set_read_settings(&params->reads[SNOR_CMD_READ_1_1_4],
-					  0, 8, SPINOR_OP_READ_1_1_4,
-					  SNOR_PROTO_1_1_4);
+				0, 8, SPINOR_OP_READ_1_1_4,
+				SNOR_PROTO_1_1_4);
+
+		params->hwcaps.mask |= SNOR_HWCAPS_READ_1_4_4;
+		spi_nor_set_read_settings(&params->reads[SNOR_CMD_READ_1_4_4],
+				0, 6, SPINOR_OP_READ_1_4_4,
+				SNOR_PROTO_1_4_4);
+
+	}
+
+	if (info->flags & SPI_NOR_HAS_FIX_DUMMY) {
+		spi_nor_set_read_settings(&params->reads[SNOR_CMD_READ_1_4_4],
+				0, 10, SPINOR_OP_READ_1_4_4,
+				SNOR_PROTO_1_4_4);
+
 	}
 
 	if (info->flags & SPI_NOR_OCTAL_READ) {
@@ -2776,7 +2860,13 @@ static void spi_nor_info_init_params(str
 	/* Page Program settings. */
 	params->hwcaps.mask |= SNOR_HWCAPS_PP;
 	spi_nor_set_pp_settings(&params->page_programs[SNOR_CMD_PP],
-				SPINOR_OP_PP, SNOR_PROTO_1_1_1);
+			SPINOR_OP_PP, SNOR_PROTO_1_1_1);
+
+	if (info->flags & SPI_NOR_QUAD_WRITE) {
+		params->hwcaps.mask |= SNOR_HWCAPS_PP_1_1_4;
+		spi_nor_set_pp_settings(&params->page_programs[SNOR_CMD_PP_1_1_4],
+				SPINOR_OP_PP_1_1_4, SNOR_PROTO_1_1_4);
+	}
 
 	/*
 	 * Sector Erase settings. Sort Erase Types in ascending order, with the
@@ -3216,7 +3306,7 @@ int spi_nor_scan(struct spi_nor *nor, co
 	dev_info(dev, "%s (%lld Kbytes)\n", info->name,
 			(long long)mtd->size >> 10);
 
-	dev_dbg(dev,
+	dev_info(dev,
 		"mtd .name = %s, .size = 0x%llx (%lldMiB), "
 		".erasesize = 0x%.8x (%uKiB) .numeraseregions = %d\n",
 		mtd->name, (long long)mtd->size, (long long)(mtd->size >> 20),
diff -urpN --no-dereference -X diffgen.ignore test-tree/drivers/mtd/spi-nor/core.h milky/drivers/mtd/spi-nor/core.h
--- test-tree/drivers/mtd/spi-nor/core.h	2024-06-01 13:18:38.696510683 -0400
+++ milky/drivers/mtd/spi-nor/core.h	2024-05-21 05:22:27.000000000 -0400
@@ -311,7 +311,10 @@ struct flash_info {
 					 * BP3 is bit 6 of status register.
 					 * Must be used with SPI_NOR_4BIT_BP.
 					 */
+#define SPI_NOR_QUAD_WRITE      BIT(19) /* Flash support Quad write */
+#define SPI_NOR_QUAD_OP         (SPI_NOR_QUAD_READ | SPI_NOR_QUAD_WRITE)
 
+#define SPI_NOR_HAS_FIX_DUMMY  BIT(20)
 	/* Part specific fixup hooks. */
 	const struct spi_nor_fixups *fixups;
 };
@@ -398,6 +401,7 @@ extern const struct spi_nor_manufacturer
 extern const struct spi_nor_manufacturer spi_nor_winbond;
 extern const struct spi_nor_manufacturer spi_nor_xilinx;
 extern const struct spi_nor_manufacturer spi_nor_xmc;
+extern const struct spi_nor_manufacturer spi_nor_cvitek;
 
 int spi_nor_write_enable(struct spi_nor *nor);
 int spi_nor_write_disable(struct spi_nor *nor);
@@ -410,6 +414,7 @@ int spi_nor_sr1_bit6_quad_enable(struct
 int spi_nor_sr2_bit1_quad_enable(struct spi_nor *nor);
 int spi_nor_sr2_bit7_quad_enable(struct spi_nor *nor);
 int spi_nor_write_sr_and_check(struct spi_nor *nor, u8 sr1);
+int spi_nor_sr_bit1_quad_enable(struct spi_nor *nor);
 
 int spi_nor_xread_sr(struct spi_nor *nor, u8 *sr);
 ssize_t spi_nor_read_data(struct spi_nor *nor, loff_t from, size_t len,
diff -urpN --no-dereference -X diffgen.ignore test-tree/drivers/mtd/spi-nor/eon.c milky/drivers/mtd/spi-nor/eon.c
--- test-tree/drivers/mtd/spi-nor/eon.c	2024-06-01 13:18:38.696510683 -0400
+++ milky/drivers/mtd/spi-nor/eon.c	2024-05-21 05:22:27.000000000 -0400
@@ -24,6 +24,10 @@ static const struct flash_info eon_parts
 			     SECT_4K | SPI_NOR_DUAL_READ) },
 	{ "en25qh128",  INFO(0x1c7018, 0, 64 * 1024,  256, 0) },
 	{ "en25qh256",  INFO(0x1c7019, 0, 64 * 1024,  512, 0) },
+	{ "en25qx64a",  INFO(0x1c7117, 0, 64 * 1024,  128,
+		SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ) },
+	{ "en25qx128a", INFO(0x1c7118, 0, 64 * 1024,  256,
+		SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ) },
 	{ "en25s64",	INFO(0x1c3817, 0, 64 * 1024,  128, SECT_4K) },
 };
 
diff -urpN --no-dereference -X diffgen.ignore test-tree/drivers/mtd/spi-nor/winbond.c milky/drivers/mtd/spi-nor/winbond.c
--- test-tree/drivers/mtd/spi-nor/winbond.c	2024-06-01 13:18:38.696510683 -0400
+++ milky/drivers/mtd/spi-nor/winbond.c	2024-05-21 05:22:27.000000000 -0400
@@ -71,7 +71,7 @@ static const struct flash_info winbond_p
 			    SPI_NOR_HAS_LOCK | SPI_NOR_HAS_TB) },
 	{ "w25q256jwm", INFO(0xef8019, 0, 64 * 1024, 512,
 			    SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ |
-			    SPI_NOR_HAS_LOCK | SPI_NOR_HAS_TB) },
+			    SPI_NOR_HAS_LOCK | SPI_NOR_HAS_TB | SPI_NOR_4B_OPCODES) },
 	{ "w25x64", INFO(0xef3017, 0, 64 * 1024, 128, SECT_4K) },
 	{ "w25q64", INFO(0xef4017, 0, 64 * 1024, 128,
 			 SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ) },
@@ -89,14 +89,22 @@ static const struct flash_info winbond_p
 	{ "w25q80bl", INFO(0xef4014, 0, 64 * 1024,  16, SECT_4K) },
 	{ "w25q128", INFO(0xef4018, 0, 64 * 1024, 256, SECT_4K) },
 	{ "w25q256", INFO(0xef4019, 0, 64 * 1024, 512,
-			  SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ)
+			  SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ |
+			  SPI_NOR_4B_OPCODES)
+	  .fixups = &w25q256_fixups },
+	{ "w25q512jveiq", INFO(0xef4020, 0, 64 * 1024, 1024,
+			  SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ |
+			  SPI_NOR_4B_OPCODES)
 	  .fixups = &w25q256_fixups },
 	{ "w25q256jvm", INFO(0xef7019, 0, 64 * 1024, 512,
-			     SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ) },
+			     SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ |
+				 SPI_NOR_4B_OPCODES) },
 	{ "w25q256jw", INFO(0xef6019, 0, 64 * 1024, 512,
-			     SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ) },
+			     SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ |
+				 SPI_NOR_4B_OPCODES) },
 	{ "w25m512jv", INFO(0xef7119, 0, 64 * 1024, 1024,
-			    SECT_4K | SPI_NOR_QUAD_READ | SPI_NOR_DUAL_READ) },
+			    SECT_4K | SPI_NOR_QUAD_READ | SPI_NOR_DUAL_READ |
+				SPI_NOR_4B_OPCODES) },
 };
 
 /**
diff -urpN --no-dereference -X diffgen.ignore test-tree/drivers/mtd/spi-nor/xmc.c milky/drivers/mtd/spi-nor/xmc.c
--- test-tree/drivers/mtd/spi-nor/xmc.c	2024-06-01 13:18:38.696510683 -0400
+++ milky/drivers/mtd/spi-nor/xmc.c	2024-05-21 05:22:27.000000000 -0400
@@ -10,10 +10,38 @@
 
 static const struct flash_info xmc_parts[] = {
 	/* XMC (Wuhan Xinxin Semiconductor Manufacturing Corp.) */
+	{ "XM25QH64C", INFO(0x204017, 0x0, 64 * 1024, 128,
+				SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ | SECT_4K)},
+	{ "XM25QH128C", INFO(0x204018, 0x0, 64 * 1024, 256,
+				SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ | SECT_4K)},
+	{ "XM25QH256C", INFO(0x204019, 0x0, 64 * 1024, 512,
+				SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ | SECT_4K |
+				SPI_NOR_4B_OPCODES)},
 	{ "XM25QH64A", INFO(0x207017, 0, 64 * 1024, 128,
 			    SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ) },
 	{ "XM25QH128A", INFO(0x207018, 0, 64 * 1024, 256,
-			     SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ) },
+			    SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ) },
+	{ "XM25Qx128A", INFO(0x207118, 0, 64 * 1024, 256,
+				SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ) },
+
+
+	{ "JY25VQ128A", INFO(0x1c4018, 0x0, 64 * 1024, 256,
+				SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ | SECT_4K)},
+	{ "JY25VQ64A", INFO(0x4a4017, 0x0, 64 * 1024, 128,
+				SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ | SECT_4K)},
+
+	{ "ZB25VQ64B", INFO(0x5e4017, 0x0, 64 * 1024, 128,
+				SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ)},
+	{ "ZB25VQ128A", INFO(0x5e4018, 0x0, 64 * 1024, 256,
+				SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ)},
+
+	{ "XT25F64F", INFO(0x0b4017, 0x0, 64 * 1024, 128,
+				SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ)},
+	{ "XT25F128F", INFO(0x0b4018, 0x0, 64 * 1024, 256,
+				SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ)},
+
+	{ "FM25Q64", INFO(0xF83217, 0x0, 64 * 1024, 128,
+				SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ)},
 };
 
 const struct spi_nor_manufacturer spi_nor_xmc = {
