diff -urpN --no-dereference -X diffgen.ignore test-tree/drivers/mmc/core/card.h milky/drivers/mmc/core/card.h
--- test-tree/drivers/mmc/core/card.h	2024-06-01 13:18:38.648510840 -0400
+++ milky/drivers/mmc/core/card.h	2024-05-21 05:22:27.000000000 -0400
@@ -212,6 +212,11 @@ static inline int mmc_card_long_read_tim
 	return c->quirks & MMC_QUIRK_LONG_READ_TIME;
 }
 
+static inline int mmc_card_extra_long_read_time(const struct mmc_card *c)
+{
+	return c->quirks & MMC_QUIRK_EXTRA_LONG_READ_TIME;
+}
+
 static inline int mmc_card_broken_irq_polling(const struct mmc_card *c)
 {
 	return c->quirks & MMC_QUIRK_BROKEN_IRQ_POLLING;
diff -urpN --no-dereference -X diffgen.ignore test-tree/drivers/mmc/core/core.c milky/drivers/mmc/core/core.c
--- test-tree/drivers/mmc/core/core.c	2024-06-01 13:18:38.648510840 -0400
+++ milky/drivers/mmc/core/core.c	2024-05-21 05:22:27.000000000 -0400
@@ -244,6 +244,16 @@ static void __mmc_start_request(struct m
 		}
 	}
 
+	/*
+	 * Block all CMD except for CMD0 once CARD ever unplugged
+	 */
+	if (host->ever_unplugged && mrq->cmd->opcode != 0) {
+		mrq->cmd->error = -EBUSY;
+		mmc_complete_cmd(mrq);
+		complete(&mrq->completion);
+		return;
+	}
+
 	if (mrq->cap_cmd_during_tfr) {
 		host->ongoing_mrq = mrq;
 		/*
@@ -343,6 +353,16 @@ int mmc_start_request(struct mmc_host *h
 	if (mmc_card_removed(host->card))
 		return -ENOMEDIUM;
 
+	/*
+	 * Block all CMD except for CMD0 once CARD ever unplugged
+	 */
+	if (host->ever_unplugged) {
+		if (mrq->cmd->opcode == 0)
+			host->ever_unplugged = false;
+		else
+			return -ENOMEDIUM;
+	}
+
 	mmc_mrq_pr_debug(host, mrq, false);
 
 	WARN_ON(!host->claimed);
@@ -722,6 +742,16 @@ void mmc_set_data_timeout(struct mmc_dat
 	}
 
 	/*
+	 * For Micron eMMC (MTFC4GACAJCN 8GB), when boot after power loss,
+	 * it might take very long time (longer than 500ms). Per Micron's
+	 * suggestion to extend the read data timeout velue.
+	 */
+	if (mmc_card_extra_long_read_time(card) && data->flags & MMC_DATA_READ) {
+		data->timeout_ns = 0x7fffffff;
+		data->timeout_clks = 0;
+	}
+
+	/*
 	 * Some cards need very high timeouts if driven in SPI mode.
 	 * The worst observed timeout was 900ms after writing a
 	 * continuous stream of data until the internal logic
@@ -2089,9 +2119,11 @@ int mmc_hw_reset(struct mmc_host *host)
 	ret = host->bus_ops->hw_reset(host);
 	mmc_bus_put(host);
 
-	if (ret < 0)
-		pr_warn("%s: tried to HW reset card, got error %d\n",
+	if (ret < 0) {
+		host->ever_unplugged = true;
+		pr_err("%s: tried to HW reset card, got error %d\n",
 			mmc_hostname(host), ret);
+	}
 
 	return ret;
 }
diff -urpN --no-dereference -X diffgen.ignore test-tree/drivers/mmc/core/host.c milky/drivers/mmc/core/host.c
--- test-tree/drivers/mmc/core/host.c	2024-06-01 13:18:38.648510840 -0400
+++ milky/drivers/mmc/core/host.c	2024-05-21 05:22:27.000000000 -0400
@@ -206,6 +206,9 @@ int mmc_of_parse(struct mmc_host *host)
 	/* f_max is obtained from the optional "max-frequency" property */
 	device_property_read_u32(dev, "max-frequency", &host->f_max);
 
+	/* f_src is obtained from the optional "src-frequency" property */
+	device_property_read_u32(dev, "src-frequency", &host->f_src);
+
 	/*
 	 * Configure CD and WP pins. They are both by default active low to
 	 * match the SDHCI spec. If GPIOs are provided for CD and / or WP, the
diff -urpN --no-dereference -X diffgen.ignore test-tree/drivers/mmc/core/quirks.h milky/drivers/mmc/core/quirks.h
--- test-tree/drivers/mmc/core/quirks.h	2024-06-01 13:18:38.648510840 -0400
+++ milky/drivers/mmc/core/quirks.h	2024-05-21 05:22:27.000000000 -0400
@@ -65,6 +65,8 @@ static const struct mmc_fixup __maybe_un
 	 */
 	MMC_FIXUP(CID_NAME_ANY, CID_MANFID_MICRON, 0x200, add_quirk_mmc,
 		  MMC_QUIRK_LONG_READ_TIME),
+	MMC_FIXUP("Q2J55L", CID_MANFID_MICRON, 0x14e, add_quirk_mmc,
+		  MMC_QUIRK_EXTRA_LONG_READ_TIME),
 	MMC_FIXUP("008GE0", CID_MANFID_TOSHIBA, CID_OEMID_ANY, add_quirk_mmc,
 		  MMC_QUIRK_LONG_READ_TIME),
 
diff -urpN --no-dereference -X diffgen.ignore test-tree/drivers/mmc/core/sdio.c milky/drivers/mmc/core/sdio.c
--- test-tree/drivers/mmc/core/sdio.c	2024-06-01 13:18:38.648510840 -0400
+++ milky/drivers/mmc/core/sdio.c	2024-05-21 05:22:27.000000000 -0400
@@ -1290,3 +1290,42 @@ err:
 	return err;
 }
 
+int sdio_reset_comm(struct mmc_card *card)
+{
+	struct mmc_host *host = card->host;
+	u32 ocr;
+	u32 rocr;
+	int err;
+
+	mmc_claim_host(host);
+	mmc_retune_disable(host);
+	mmc_go_idle(host);
+	mmc_set_clock(host, host->f_min);
+	err = mmc_send_io_op_cond(host, 0, &ocr);
+
+	if (err)
+		goto err;
+
+	rocr = mmc_select_voltage(host, ocr);
+
+	if (!rocr) {
+		err = -EINVAL;
+		goto err;
+	}
+
+	err = mmc_sdio_init_card(host, rocr, card);
+
+	if (err)
+		goto err;
+
+	mmc_release_host(host);
+	return 0;
+
+err:
+	pr_err("%s: Error resetting SDIO communications (%d)\n",
+		mmc_hostname(host), err);
+	mmc_release_host(host);
+	return err;
+}
+EXPORT_SYMBOL(sdio_reset_comm);
+
diff -urpN --no-dereference -X diffgen.ignore test-tree/drivers/mmc/core/slot-gpio.c milky/drivers/mmc/core/slot-gpio.c
--- test-tree/drivers/mmc/core/slot-gpio.c	2024-06-01 13:18:38.652510828 -0400
+++ milky/drivers/mmc/core/slot-gpio.c	2024-05-21 05:22:27.000000000 -0400
@@ -16,15 +16,6 @@
 
 #include "slot-gpio.h"
 
-struct mmc_gpio {
-	struct gpio_desc *ro_gpio;
-	struct gpio_desc *cd_gpio;
-	irqreturn_t (*cd_gpio_isr)(int irq, void *dev_id);
-	char *ro_label;
-	char *cd_label;
-	u32 cd_debounce_delay_ms;
-};
-
 static irqreturn_t mmc_gpio_cd_irqt(int irq, void *dev_id)
 {
 	/* Schedule a card detection after a debounce timeout */
diff -urpN --no-dereference -X diffgen.ignore test-tree/drivers/mmc/host/sdhci.c milky/drivers/mmc/host/sdhci.c
--- test-tree/drivers/mmc/host/sdhci.c	2024-06-01 13:18:38.664510789 -0400
+++ milky/drivers/mmc/host/sdhci.c	2024-05-21 05:22:27.000000000 -0400
@@ -45,6 +45,11 @@
 
 #define MAX_TUNING_LOOP 40
 
+//#define DEBUG_CMD_ONCE_ERROR_OCCUR
+#ifdef DEBUG_CMD_ONCE_ERROR_OCCUR
+static bool bForceDumpCMD;
+#endif
+
 static unsigned int debug_quirks = 0;
 static unsigned int debug_quirks2;
 
@@ -110,6 +115,9 @@ void sdhci_dumpregs(struct sdhci_host *h
 				   sdhci_readl(host, SDHCI_ADMA_ADDRESS));
 		}
 	}
+#ifdef DEBUG_CMD_ONCE_ERROR_OCCUR
+	bForceDumpCMD = true;
+#endif
 
 	if (host->ops->dump_vendor_regs)
 		host->ops->dump_vendor_regs(host);
@@ -242,7 +250,8 @@ static void sdhci_do_reset(struct sdhci_
 			return;
 	}
 
-	host->ops->reset(host, mask);
+	if (host->ops->reset)
+		host->ops->reset(host, mask);
 
 	if (mask & SDHCI_RESET_ALL) {
 		if (host->flags & (SDHCI_USE_SDMA | SDHCI_USE_ADMA)) {
@@ -271,6 +280,12 @@ static void sdhci_set_default_irqs(struc
 	sdhci_writel(host, host->ier, SDHCI_SIGNAL_ENABLE);
 }
 
+/*register macro */
+#define P_VENDOR_SPECIFIC_AREA		0xE8
+#define P_VENDOR2_SPECIFIC_AREA		0xEA
+#define VENDOR_EMMC_CTRL		0x2C
+#define SDHCI_ERR_INT_STATUS_EN		0x36
+
 static void sdhci_config_dma(struct sdhci_host *host)
 {
 	u8 ctrl;
@@ -321,6 +336,7 @@ static void sdhci_init(struct sdhci_host
 {
 	struct mmc_host *mmc = host->mmc;
 	unsigned long flags;
+	void *vendor_base = NULL;
 
 	if (soft)
 		sdhci_do_reset(host, SDHCI_RESET_CMD | SDHCI_RESET_DATA);
@@ -329,6 +345,13 @@ static void sdhci_init(struct sdhci_host
 
 	if (host->v4_mode)
 		sdhci_do_enable_v4_mode(host);
+	vendor_base = host->ioaddr + (readl(host->ioaddr + P_VENDOR_SPECIFIC_AREA) & ((1<<12)-1));
+
+#ifdef CONFIG_ARCH_CV183X
+	writew(readw(vendor_base + VENDOR_EMMC_CTRL) | 0x1, vendor_base + VENDOR_EMMC_CTRL);
+#elif defined(CONFIG_ARCH_CV182X)
+//	writew(readw(vendor_base) | 0x1, vendor_base);
+#endif
 
 	spin_lock_irqsave(&host->lock, flags);
 	sdhci_set_default_irqs(host);
@@ -1930,6 +1953,9 @@ clock_set:
 	clk |= ((div & SDHCI_DIV_HI_MASK) >> SDHCI_DIV_MASK_LEN)
 		<< SDHCI_DIVIDER_HI_SHIFT;
 
+	pr_debug("host->max_clk %u, clock:%u, actual_clock:%u, real_div:%u\n",
+		 host->max_clk, clock, *actual_clock, real_div);
+
 	return clk;
 }
 EXPORT_SYMBOL_GPL(sdhci_calc_clk);
@@ -2131,6 +2157,12 @@ void sdhci_request(struct mmc_host *mmc,
 	unsigned long flags;
 	bool present;
 
+	if (host->quirks2 & SDHCI_QUIRK2_SW_CLK_GATING_SUPPORT) {
+		sdhci_writew(host,
+			sdhci_readw(host, SDHCI_CLOCK_CONTROL) | SDHCI_CLOCK_CARD_EN,
+			SDHCI_CLOCK_CONTROL);
+	}
+
 	/* Firstly check card presence */
 	present = mmc->ops->get_cd(mmc);
 
@@ -2855,6 +2887,18 @@ out:
 }
 EXPORT_SYMBOL_GPL(sdhci_execute_tuning);
 
+static int sdhci_select_drive_strength(struct mmc_card *card,
+				       unsigned int max_dtr, int host_drv,
+				       int card_drv, int *drv_type)
+{
+	struct sdhci_host *host = mmc_priv(card->host);
+
+	if (!host->ops->select_drive_strength)
+		return 0;
+
+	return host->ops->select_drive_strength(host, card, max_dtr, host_drv,
+						card_drv, drv_type);
+}
 static void sdhci_enable_preset_value(struct sdhci_host *host, bool enable)
 {
 	/* Host Controller v3.00 defines preset value registers */
@@ -2937,6 +2981,11 @@ static void sdhci_card_event(struct mmc_
 
 	present = mmc->ops->get_cd(mmc);
 
+	/* Once REG_0x24[16] is 0, raise a flag. */
+	if (!present) {
+		mmc->ever_unplugged = true;
+	}
+
 	spin_lock_irqsave(&host->lock, flags);
 
 	/* Check sdhci_has_requests() first in case we are runtime suspended */
@@ -2968,6 +3017,7 @@ static const struct mmc_host_ops sdhci_o
 	.start_signal_voltage_switch	= sdhci_start_signal_voltage_switch,
 	.prepare_hs400_tuning		= sdhci_prepare_hs400_tuning,
 	.execute_tuning			= sdhci_execute_tuning,
+	.select_drive_strength		= sdhci_select_drive_strength,
 	.card_event			= sdhci_card_event,
 	.card_busy	= sdhci_card_busy,
 };
@@ -3098,6 +3148,12 @@ static bool sdhci_request_done(struct sd
 	else
 		mmc_request_done(host->mmc, mrq);
 
+	if (host->quirks2 & SDHCI_QUIRK2_SW_CLK_GATING_SUPPORT) {
+		sdhci_writew(host,
+			(sdhci_readw(host, SDHCI_CLOCK_CONTROL) & ~SDHCI_CLOCK_CARD_EN),
+			SDHCI_CLOCK_CONTROL);
+	}
+
 	return false;
 }
 
@@ -3444,6 +3500,8 @@ static irqreturn_t sdhci_irq(int irq, vo
 			u32 present = sdhci_readl(host, SDHCI_PRESENT_STATE) &
 				      SDHCI_CARD_PRESENT;
 
+			if (intmask & SDHCI_INT_CARD_REMOVE)
+				host->mmc->ever_unplugged = true;
 			/*
 			 * There is a observation on i.mx esdhc.  INSERT
 			 * bit will be immediately set again when it gets
@@ -3470,6 +3528,54 @@ static irqreturn_t sdhci_irq(int irq, vo
 			result = IRQ_WAKE_THREAD;
 		}
 
+#ifdef DEBUG_CMD_ONCE_ERROR_OCCUR
+		if ((intmask & SDHCI_INT_ERROR) && (bForceDumpCMD == false)) {
+#else
+		if (intmask & SDHCI_INT_ERROR) {
+#endif
+			//Ignore error of Tuning CMD.
+			//MMC - CMD21
+			//SD  - CMD19
+			if (host->cmd &&
+			(((host->cmd->opcode != 21) &&
+			(host->mmc->card) && (host->mmc->card->type == MMC_TYPE_MMC)) ||
+			((host->cmd->opcode != 19) &&
+			(host->mmc->card) && (host->mmc->card->type == MMC_TYPE_SD)))) {
+				pr_err("%s: host->mmc->card->type = %d\n", __func__, host->mmc->card->type);
+				pr_err("%s: err cmd %p\n", __func__, host->cmd);
+				pr_err("%s: err opcode %d\n", __func__, host->cmd->opcode);
+				pr_err("%s: err interrupt 0x%08x\n", __func__, intmask);
+				sdhci_dumpregs(host);
+#ifdef DEBUG_CMD_ONCE_ERROR_OCCUR
+				bForceDumpCMD = true;
+#endif
+			}
+		}
+
+#ifdef DEBUG_CMD_ONCE_ERROR_OCCUR
+		if (bForceDumpCMD) {
+			if (host->cmd) {
+				SDHCI_DUMP("%s: [DEBUG]err cmd %p\n", __func__, host->cmd);
+				SDHCI_DUMP("%s: [DEBUG]err opcode %d\n", __func__, host->cmd->opcode);
+			} else if (host->data_cmd) {
+				SDHCI_DUMP("%s: [DEBUG]err datacmd %p\n", __func__, host->data_cmd);
+				SDHCI_DUMP("%s: [DEBUG]err opcode %d\n", __func__, host->data_cmd->opcode);
+			}
+			SDHCI_DUMP("%s: [DEBUG]err interrupt 0x%08x\n", __func__, intmask);
+			SDHCI_DUMP("%s: [DEBUG]Argument: 0x%08x\n", __func__,
+					sdhci_readl(host, SDHCI_ARGUMENT));
+			SDHCI_DUMP("%s: [DEBUG]Resp[0]:   0x%08x | Resp[1]:  0x%08x\n", __func__,
+					sdhci_readl(host, SDHCI_RESPONSE),
+					sdhci_readl(host, SDHCI_RESPONSE + 4));
+			SDHCI_DUMP("%s: [DEBUG]Resp[2]:   0x%08x | Resp[3]:  0x%08x\n", __func__,
+					sdhci_readl(host, SDHCI_RESPONSE + 8),
+					sdhci_readl(host, SDHCI_RESPONSE + 12));
+			if (intmask & SDHCI_INT_ERROR) {
+				sdhci_dumpregs(host);
+			}
+		}
+#endif
+
 		if (intmask & SDHCI_INT_CMD_MASK)
 			sdhci_cmd_irq(host, intmask & SDHCI_INT_CMD_MASK, &intmask);
 
@@ -4140,7 +4246,7 @@ int sdhci_setup_host(struct sdhci_host *
 	override_timeout_clk = host->timeout_clk;
 
 	if (host->version > SDHCI_SPEC_420) {
-		pr_err("%s: Unknown controller version (%d). You may experience problems.\n",
+		pr_debug("%s: Host Controller version %d\n",
 		       mmc_hostname(mmc), host->version);
 	}
 
@@ -4405,7 +4511,10 @@ int sdhci_setup_host(struct sdhci_host *
 				mmc_hostname(mmc), ret);
 			mmc->supply.vqmmc = ERR_PTR(-EINVAL);
 		}
+	}
 
+	if (host->quirks2 & SDHCI_QUIRK2_NO_3_3_V) {
+		host->flags &= ~SDHCI_SIGNALING_330;
 	}
 
 	if (host->quirks2 & SDHCI_QUIRK2_NO_1_8_V) {
diff -urpN --no-dereference -X diffgen.ignore test-tree/drivers/mmc/host/sdhci.h milky/drivers/mmc/host/sdhci.h
--- test-tree/drivers/mmc/host/sdhci.h	2024-06-01 13:18:38.664510789 -0400
+++ milky/drivers/mmc/host/sdhci.h	2024-05-21 05:22:27.000000000 -0400
@@ -127,6 +127,7 @@
 #define  SDHCI_RESET_DATA	0x04
 
 #define SDHCI_INT_STATUS	0x30
+#define SDHCI_ERR_INT_STATUS	0x32
 #define SDHCI_INT_ENABLE	0x34
 #define SDHCI_SIGNAL_ENABLE	0x38
 #define  SDHCI_INT_RESPONSE	0x00000001
@@ -474,6 +475,17 @@ struct sdhci_host {
  */
 #define SDHCI_QUIRK2_USE_32BIT_BLK_CNT			(1<<18)
 
+/* To enhance power consumption,
+ * the sdio clk be disabled when CMD/DAT bus idle
+ */
+#define SDHCI_QUIRK2_SW_CLK_GATING_SUPPORT			(1<<29)
+/* The system physically doesn't support 3.3v, even if the host does */
+#define SDHCI_QUIRK2_NO_3_3_V               (1<<30)
+
+/* Support Disable when device is not present (EMMC only) */
+#define SDHCI_QUIRK2_SUPPORT_DISABLE_CLK        (1<<31)
+
+
 	int irq;		/* Device IRQ */
 	void __iomem *ioaddr;	/* Mapped address */
 	phys_addr_t mapbase;	/* physical address base */
@@ -651,6 +663,10 @@ struct sdhci_ops {
 					 unsigned int length);
 	void	(*request_done)(struct sdhci_host *host,
 				struct mmc_request *mrq);
+	int	(*select_drive_strength)(struct sdhci_host *host,
+					 struct mmc_card *card,
+					 unsigned int max_dtr, int host_drv,
+					 int card_drv, int *drv_type);
 	void    (*dump_vendor_regs)(struct sdhci_host *host);
 };
 
diff -urpN --no-dereference -X diffgen.ignore test-tree/drivers/mmc/host/sdhci-pltfm.c milky/drivers/mmc/host/sdhci-pltfm.c
--- test-tree/drivers/mmc/host/sdhci-pltfm.c	2024-06-01 13:18:38.660510801 -0400
+++ milky/drivers/mmc/host/sdhci-pltfm.c	2024-05-21 05:22:27.000000000 -0400
@@ -100,6 +100,9 @@ void sdhci_get_property(struct platform_
 	if (device_property_present(dev, "no-1-8-v"))
 		host->quirks2 |= SDHCI_QUIRK2_NO_1_8_V;
 
+	if (device_property_present(dev, "sw-clk-gating"))
+		host->quirks2 |= SDHCI_QUIRK2_SW_CLK_GATING_SUPPORT;
+
 	sdhci_get_compatibility(pdev);
 
 	device_property_read_u32(dev, "clock-frequency", &pltfm_host->clock);
